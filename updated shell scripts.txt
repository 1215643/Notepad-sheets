1.BACKUP FILE 


#!/bin/bash
BACKUPFILE="backup-$(date +%m-%d-%Y)"
archive="${1:-$BACKUPFILE}"
find . -mtime -1 -type f -print0 | xargs -0 tar rvf "$archive.tar"
gzip -f "$archive.tar"
echo "directory $pwd is backed up in archive file $archive.tar.gz"

(crontab -l ; echo "0 6 * * * /home/ec2-user/bhargav/backup.sh") | crontab -


2.INVENTORY


#!/bin/bash
echo "provide host name"
read host
grep -q $host /home/ec2-user/bhargav/database
if [ $? -eq 0 ]
then 
        echo "this host name already exists"
        echo
        exit 0
fi
echo "provide ip address"
read ip
grep -q $ip /home/ec2-user/bhargav/database
if [ $? -eq 0 ]
then
        echo "its alrteady exists"
        exit 0
fi
echo "provide description"
read d
echo 
echo "$host $ip $d" >> /home/ec2-user/bhargav/database
echo "records are added into the database"


DELETORY

#bin/bash
#!/bin/bash
echo " enter host or ip"
read hip
echo 
grep -q $hip /home/ec2-user/bhargav/database
if [ $? -eq 0 ]
then
echo
 sed -i '/'$hip'/d' /home/ec2-user/bhargav/database
 echo "$hip is removed from database"
else
         echo " no host & ip are availabe"
fi


 INVENTORYSERVER.SH


#!/bin/bash
echo "select one"
echo
echo 'a=add'
echo 'd=del'
echo

read choice
case $choice in

a) /home/ec2-user/bhargav/inventory.sh ;;
d) /home/ec2-user/bhargav/deletory.sh ;;
*) echo "invalid option"
esac


3.ENCRYPTION


#!/bin/bash
if [ $# -ne 2 ]; then
    echo "Usage: $0 <input_file> <output_file>"
        exit 1
         fi
input_file="$1"
output_file="$2"
read -sp "Enter a password: " password
echo
 # Encrypt the file using openssl
  openssl enc -aes-256-cbc -salt -in "$input_file" -out "$output_file" -k "$password" -pbkdf2

  if [ $? -eq 0 ]; then
               echo "File encrypted successfully."
  else
               echo "Encryption failed"
  fi


 DECRYPTION


if [ $# -ne 2 ]
then
        echo "error"
        exit 1
fi

inputfile=$1
outputfile=$2

read -s -p "decryption password:" password
echo
openssl enc -d -aes-256-cbc -in "$inputfile" -out "$outputfile" -k "$password" -pbkdf2

if [ $? -eq 0 ]
then
        echo "decryption success"
else
        echo "decryption failed"
fi



4.LOGROTATION


#!/bin/bash

log_file="/var/log/dnf.log"
num_backups=5

# Check if the log file exists before performing log rotation
if [ -f "$log_file" ]; then
 for ((i=$num_backups; i>1; i--)); do
 prev=$((i-1))
  [ -f "$log_file.$prev" ] && mv "$log_file.$prev" "$log_file.$i"
done
  [ -f "$log_file" ] && mv "$log_file" "$log_file.1"
  touch "$log_file"
  echo "Log file created"
 else
  echo "Log file not found: $log_file"
 fi


5.DISKSPACE


#!/bin/bash
# Set the threshold for disk space usage (in percentage)
THRESHOLD=70
# Get disk space usage percentage for the root file system
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1)
# Check if disk usage exceeds the threshold
if [ "$DISK_USAGE" -gt "$THRESHOLD" ]; then
# Compose the email message
SUBJECT="Disk Space Alert"
MESSAGE="Attention: Disk space usage is ${DISK_USAGE}% which exceeds the threshold of ${THRESHOLD}%."
# Send email using the mail command
echo "$MESSAGE" | mail -s "$SUBJECT" lakshmiaiswarya2000@gmail.com
echo "Email sent successfully."
else
echo "Disk space is below the threshold. No action taken."
fi



6.FINDING


!/bin/bash
if [ -d "$@" ]; then
        echo "Files found: $(find "$@" -type f | wc -l)"
        echo "Folders found: $(find "$@" -type d | wc -l)"
else
        echo "[ERROR] Please retry with another folder."
        exit 1
fi



7.EXTRACT ZIP FILES



#!/bin/bash
if [ $# -ne 1 ]
then
        echo "error "
        exit 1
fi
zip_file="$1"
  # Check if the zip file exists
 if [ ! -f "$zip_file" ]
 then
      echo "error zip file not found"
      exit 1
 fi
     
  unzip -o "$zip_file"
  unzip -o my_archive.zip -d extracted_files
     
   echo extraction complete



8.USERADD


#!/bin/bash
echo "provide user name"
read user
echo
echo
grep -q $user /etc/passwd
if [ $? -eq 0 ]
then
        echo "this user has already exists"
        exit 0
fi
echo "provide description"
read d
echo "do you want to specify the user id (y/n) ?"
read yn
if [ "$yn" == y ]
then
        echo "specify the user id "
        read uid
        useradd $user -c "$d" -u $uid
        echo " $user account ha been created successfully with user id"
elif [ "$yn" == n ]
then
        echo "system defined uid will be created"
        useradd $user -c "$d"
        echo "$user account has been created successfully with system defined user"
fi




9.LOGFILES FOR EVERY3HOURS



#!/bin/bash
#
LOGFILE=/home/ec2-user/LOGFILE

LAST_180_MINS=$(date -d "180 minutes ago" +"%Y-%m-%d %H:%M:%S")
 
 echo "Fetching logs from $LAST_180_MINS to $TIMESTAMP..."
  
  journalctl --since "$LAST_180_MINS" >> "$LOGFILE"
   
   echo "Logs saved to $LOGFILE."  



10.UNIQ



#! /bin/sh
#
echo -n "Enter Filename-> "
read filename
if [ -f "$filename" ]; then
sort $filename | uniq | tee sorted1.txt
else
echo "No $filename in $pwd...try again"
fi
exit 0



11.FIBONACCI SERIES


echo "enter the fibonacci series"
read n

a=0
b=1
echo "enter the fibonacci terms $n"
for ((i=0; i<n; i++))
do
        echo -n "$a"
        temp=$(( a+b ))
        a=$b
        b=$temp
done
echo


 OUTPUT:-

  sh fibprac.sh
enter the fibonacci series
5
enter the fibonacci terms 5
01123

